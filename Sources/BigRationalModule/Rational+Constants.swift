import BigInt

public extension Rational {
	static let e = {
		var rat = Rational(1)
		var factorialCarrier = BigUInt(1)
		for i in 1..<34 {
			let den = factorialCarrier * BigUInt(i)
			defer { factorialCarrier = den }
			let new = Rational.bigUInt(1, den)
			rat += new
		}
		return rat
	}()

	internal static let lnOneAndHalf = Rational("104815002319962905348482356142109234121152457748426517/258505603130718233214767002102379778808645906889441280")!

	// These values were calculated at a higher precision than the log algorithm is currently set to, so they won't
	// match raw calculations exactly
	static let ln2 = Rational("840749711794021956872210203935519130278265321445739690794402054879593062277/1212945439834060707363920024428626861132066106416369125302947977632143114240")!
	static let ln10 = Rational("188445864234489330890201466194803434258714242280094064371704040213977436683223470128521378750072449168425595018546108054181380452396731902542184252087558479613010699519/81840998974528077542096312823286169423003422315931265604565820317279310358207878731958989463797031328888978738883721894033109785618337737648149731656670482715272806400")!
}
